# ConfigMap for non-sensitive data
apiVersion: v1
kind: ConfigMap
metadata:
  name: springappconfigmap
data:
  username: springapp
  password: mongodb@123

---
# Secret for MongoDB password and URI
apiVersion: v1
kind: Secret
metadata:
  name: springappsecrets
type: Opaque
stringData:
  password: devdb@123

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
stringData:
  mongodb-uri: mongodb+srv://admin:admin123@mongodb-demo.p1jch.mongodb.net/?retryWrites=true&w=majority&appName=mongodb-demo

---
# Deployment for the Spring Boot application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springappdeployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springappcontainer
        image: iscanprint/springapp:3.0  #dockerhandson/spring-boot-mongo
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: springappconfigmap
              key: username
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: springappsecrets
              key: password
        - name: MONGO_DB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-uri
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5

---
# Service for the Spring Boot application
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort

---
# Service for MongoDB (if needed for internal communication)
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017

---
# ReplicaSet for MongoDB (adjusted for MongoDB Cloud setup)
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodbcontainer
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: springappconfigmap
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: springappsecrets
              key: password
